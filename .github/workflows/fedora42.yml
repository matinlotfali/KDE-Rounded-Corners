name: Fedora 42

on:
  push:
    branches: [ master ]
    paths-ignore: [ '**.md', '**.png' ]
  pull_request:
    branches: [ master ]
    paths: [ '**/fedora42.yml' ]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  RPM_NAME: kwin4_effect_shapecorners

jobs:
  fedora42:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: fedora:42
      options: --user root

    steps:
    - name: Install Dependencies
      run: |
        dnf -y install cmake gcc-c++ extra-cmake-modules kwin-devel kf6-kconfigwidgets-devel libepoxy-devel kf6-kcmutils-devel kf6-ki18n-devel qt6-qtbase-private-devel wayland-devel libdrm-devel
        dnf -y install rpm-build git copr-cli jq
        git config --global --add safe.directory "$GITHUB_WORKSPACE"

    - name: Check out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for accurate versioning
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build . --config ${{env.BUILD_TYPE}} -j

    - name: Package
      run: |
        cpack -V -G RPM
        RPM_FILE=artifacts/${RPM_NAME}_${GITHUB_JOB}.rpm
        mkdir artifacts
        mv ${RPM_NAME}.rpm ${RPM_FILE}
        echo "RPM_FILE=${RPM_FILE}" >> $GITHUB_ENV

    - name: Upload Workflow Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.RPM_NAME }}
        path: ${{ env.RPM_FILE }}
        compression-level: 0
        if-no-files-found: error

    - name: Fetch Build Versions
      if: github.ref == 'refs/heads/master'
      run: |
        export LAST_RELEASE_TAG=$(git describe --tags --abbrev=0);
        export REV_COUNT=$(git rev-list --count ${LAST_RELEASE_TAG}..HEAD);
        export PKG_VERSION=$(echo ${LAST_RELEASE_TAG} | sed 's/^v//');
        export KWIN_VERSION=$(dnf info -y kwin | awk '$1=="Version" {print $3}');
        export CURRENT_BUILD_VERSION=${PKG_VERSION}.${REV_COUNT}-${KWIN_VERSION};
        echo "Current build version: ${CURRENT_BUILD_VERSION}";
        echo "CURRENT_BUILD_VERSION=${CURRENT_BUILD_VERSION}" >> $GITHUB_ENV
        
        export COPR_BUILD_VERSION=$(copr monitor matinlotfali/KDE-Rounded-Corners | jq -r 'first["pkg_version"]');
        echo "Copr build version: ${COPR_BUILD_VERSION}";
        echo "COPR_BUILD_VERSION=${COPR_BUILD_VERSION}" >> $GITHUB_ENV

    - name: Upload Release Asset
      if: github.ref == 'refs/heads/master' && env.CURRENT_BUILD_VERSION != env.COPR_BUILD_VERSION
      uses: nicklasfrahm/scp-action@main
      with:
        direction: upload
        host: ${{ secrets.SOURCEFORGE_HOST }}
        username: ${{ secrets.SOURCEFORGE_USERNAME }}
        key: ${{ secrets.SOURCEFORGE_KEY }}
        fingerprint: ${{ secrets.SOURCEFORGE_HOST_FINGERPRINT }}
        source: ${{ env.RPM_FILE }}
        target: /home/frs/project/kde-rounded-corners/nightly/${{ github.job }}/${{ env.RPM_NAME }}_${{ github.job }}.rpm
        
    - name: Trigger Copr Rebuild
      if: github.ref == 'refs/heads/master' && env.CURRENT_BUILD_VERSION != env.COPR_BUILD_VERSION
      run:
        curl -X POST ${{ secrets.COPR_WEBHOOK_URL }}

#     - name: Test
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}
      
